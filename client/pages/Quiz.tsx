import React, { useState, useRef, useEffect } from "react";
import {
  ArrowRight,
  ArrowLeft,
  Instagram,
  Youtube,
  Linkedin,
  Globe,
  ChevronDown,
  Twitter,
  Star,
  Target,
  TrendingUp,
  CheckCircle,
  Sparkles,
  User,
  Mail,
  MapPin,
  Calendar,
  Download,
  Home,
  FileText,
  Layout,
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { supabase, isSupabaseConfigured } from "@/lib/supabase";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface QuizData {
  name: string;
  email: string;
  phone: string;
  age: string;
  city: string;
  primaryPlatform: string;
  secondaryPlatforms: string[];
  followerCount: string;
  niche: string;
  contentType: string;
  postingFrequency: string;
  experience: string[];
  monthlyIncome: string;
  biggestChallenge: string[];
  goals: string[];
  socialLinks: {
    instagram: string;
    youtube: string;
    linkedin: string;
    website: string;
    twitter: string;
    tiktok: string;
  };
  bio: string;
  language: string;
  engagementRate: string;
}

const initialQuizData: QuizData = {
  name: "",
  email: "",
  phone: "",
  age: "",
  city: "",
  primaryPlatform: "",
  secondaryPlatforms: [],
  followerCount: "",
  niche: "",
  contentType: "",
  postingFrequency: "",
  experience: [],
  monthlyIncome: "",
  biggestChallenge: [],
  goals: [],
  socialLinks: {
    instagram: "",
    youtube: "",
    linkedin: "",
    website: "",
    twitter: "",
    tiktok: "",
  },
  bio: "",
  language: "english",
  engagementRate: "",
};

const languages = {
  english: {
    title: "Creator Success Quiz",
    subtitle: "Get your personalized growth strategy in 3 minutes",
    steps: {
      1: "Platform & Followers",
      2: "Follower Count",
      3: "Other Platforms",
      4: "Content Niche",
      5: "Content Type",
      6: "Posting Frequency",
      7: "Experience",
      8: "Income",
      9: "Biggest Challenge",
      10: "Goals",
      11: "Social Links",
      12: "Engagement Rate",
      13: "Contact Info",
    },
    questions: {
      name: "What's your name?",
      email: "What's your email address?",
      phone: "What's your phone number? (Optional)",
      city: "Which city are you from?",
      primaryPlatform: "What's your primary content platform?",
      followerCount: "How many followers do you have on your primary platform?",
      secondaryPlatforms:
        "Which other platforms do you use? (Select all that apply)",
      niche: "What's your content niche?",
      contentType: "What type of content do you create?",
      postingFrequency: "How often do you post content?",
      experience:
        "How long have you been creating content? (Select all levels you've experienced)",
      monthlyIncome: "What's your current monthly income from content?",
      biggestChallenge:
        "What are your biggest challenges as a creator? (Select max 3)",
      goals: "What are your main goals for the next 6 months? (Select max 3)",
      socialLinks: "Share Your Social Presence (Optional)",
      bio: "Anything more about yourself and your content (optional)",
      engagementRate: "What's your average engagement rate?",
    },
    options: {
      platforms: [
        "Instagram",
        "YouTube",
        "LinkedIn",
        "TikTok",
        "Twitter",
        "Facebook",
        "Website/Blog",
      ],
      followerRanges: [
        "Less than 1K",
        "1K - 5K",
        "5K - 10K",
        "10K - 50K",
        "50K - 100K",
        "100K - 500K",
        "500K+",
      ],
      niches: [
        "Fashion & Beauty",
        "Technology & AI",
        "Food & Cooking",
        "Travel & Adventure",
        "Fitness & Health",
        "Personal Finance & Investing",
        "Entertainment & Comedy",
        "Entrepreneurship & Business",
        "Lifestyle & Wellness",
        "Art & Design",
        "Gaming & Esports",
        "Music & Dance",
        "Education & Learning",
        "Sports & Athletics",
        "Motivation & Self-Help",
        "Parenting & Family",
        "DIY & Crafts",
        "Spirituality & Mindfulness",
        "Other",
      ],
      contentTypes: [
        "Photos & Carousels",
        "Short Videos/Reels",
        "Long-form Videos",
        "Live Streams",
        "Stories",
        "Written Posts",
        "Podcasts",
        "Mixed Content",
      ],
      frequencies: [
        "Daily",
        "3-4 times a week",
        "Weekly",
        "2-3 times a month",
        "Monthly",
        "Irregular",
      ],
      experiences: [
        "Just started (0-6 months)",
        "Beginner (6 months - 1 year)",
        "Growing (1-2 years)",
        "Experienced (2-3 years)",
        "Expert (3+ years)",
      ],
      incomes: [
        "тВ╣0 (No income yet)",
        "тВ╣1KтАУ5K",
        "тВ╣5KтАУ15K",
        "тВ╣15KтАУ30K",
        "тВ╣30KтАУ50K",
        "тВ╣50KтАУ1L",
        "тВ╣1L+",
      ],
      challenges: [
        "ЁЯФД Growth & Engagement: Low views & inconsistent engagement",
        "ЁЯза Growth & Engagement: Staying relevant with fast-moving trends",
        "ЁЯФБ Growth & Engagement: Algorithm changes killing reach",
        "ЁЯзНтАНтЩАя╕П Growth & Engagement: Competing with bigger creators",
        "ЁЯЧгя╕П Brand & Identity: Struggling to find my unique voice/style",
        "ЁЯдЭ Brand & Identity: Balancing authenticity with brand appeal",
        "ЁЯМ▒ Brand & Identity: Building a real, connected community",
        "ЁЯТФ Monetization & Scaling: Can't convert followers into paying customers",
        "ЁЯдЭ Monetization & Scaling: Not landing brand collaborations",
        "ЁЯУК Monetization & Scaling: Confused by analytics & metrics",
        "ЁЯе╡ Creator Wellness: Burnout & content fatigue",
        "ЁЯТм Creator Wellness: Handling trolls/negativity",
        "ЁЯУ▒ Creator Wellness: Managing too many platforms at once",
      ],
      goals: [
        "Reach 10K / 50K / 100K+ Followers",
        "Earn тВ╣25K / тВ╣50K / тВ╣1L+ per month",
        "Get Brand Collaborations",
        "Build Personal Brand",
        "Create Viral Content",
        "Post More Consistently",
        "Expand to New Platforms",
      ],
      engagementRates: [
        "Less than 1%",
        "1-3%",
        "3-5%",
        "5-8%",
        "8-12%",
        "More than 12%",
        "I don't know",
      ],
    },
    buttons: {
      next: "Next Step",
      back: "Previous",
      submit: "Get My Creator Analysis",
    },
    freeResources: {
      title: "ЁЯОЙ Quiz Complete! Here are your FREE Creator Resources",
      subtitle:
        "Download these powerful tools to kickstart your creator journey",
      mediaKit: {
        title: "Professional Media Kit Template",
        description: "Create stunning media kits that brands will love",
      },
      emailTemplates: {
        title: "Brand Outreach Email Templates",
        description: "30+ proven email templates for brand partnerships",
      },
      growthGuide: {
        title: "90-Day Growth Strategy Guide",
        description: "Step-by-step roadmap to grow your following",
      },
      downloadFree: "Download Free",
    },
  },
  hindi: {
    title: "рдХреНрд░рд┐рдПрдЯрд░ рд╕рдХреНрд╕реЗрд╕ рдХреНрд╡рд┐рдЬрд╝",
    subtitle: "3 рдорд┐рдирдЯ рдореЗрдВ рдЕрдкрдиреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЧреНрд░реЛрде рд░рдгрдиреАрддрд┐ рдкрд╛рдПрдВ",
    steps: {
      1: "рдмреБрдирд┐рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА",
      2: "рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдФрд░ рдлреЙрд▓реЛрдЕрд░реНрд╕",
      3: "рдХрдВрдЯреЗрдВрдЯ рдирд┐рдЪ",
      4: "рдХрдВрдЯреЗрдВрдЯ рдкреНрд░рдХрд╛рд░",
      5: "рдкреЛрд╕реНрдЯрд┐рдВрдЧ рдЖрд╡реГрддреНрддрд┐",
      6: "рдЕрдиреБрднрд╡ рдФрд░ рдЖрдп",
      7: "рд╕рдмрд╕реЗ рдмрдбрд╝реА рдЪреБрдиреМрддреА",
      8: "рд▓рдХреНрд╖реНрдп",
      9: "рд╕реЛрд╢рд▓ рд▓рд┐рдВрдХреНрд╕",
      10: "рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рд░реЗрдЯ",
    },
    questions: {
      name: "рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
      email: "рдЖрдкрдХрд╛ рдИрдореЗрд▓ рдкрддрд╛ рдХреНрдпрд╛ рд╣реИ?",
      phone: "рдЖрдкрдХрд╛ рдлреЛрди рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ? (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
      city: "рдЖрдк рдХрд┐рд╕ рд╢рд╣рд░ рд╕реЗ рд╣реИрдВ?",
      primaryPlatform: "рдЖрдк рдХрд┐рд╕ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдореБрдЦреНрдп рд░реВрдк рд╕реЗ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛рддреЗ рд╣реИрдВ?",
      followerCount: "рдЖрдкрдХреЗ рдкреНрд░рд╛рдердорд┐рдХ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ рдХрд┐рддрдиреЗ рдлреЙрд▓реЛрдЕрд░реНрд╕ рд╣реИрдВ?",
      secondaryPlatforms:
        "рдЖрдк рдФрд░ рдХреМрди рд╕реЗ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ? (рдХрдИ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ)",
      niche: "рдЖрдкрдХрд╛ рдХрдВрдЯреЗрдВрдЯ рдХрд┐рд╕ рд╡рд┐рд╖рдп рдкрд░ рд╣реИ?",
      contentType: "рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛рддреЗ рд╣реИрдВ?",
      postingFrequency: "рдЖрдк рдХрд┐рддрдиреА рдмрд╛рд░ рдХрдВрдЯреЗрдВрдЯ рдкреЛрд╕реНрдЯ рдХрд░рддреЗ рд╣реИрдВ?",
      experience:
        "рдЖрдк рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ? (рдЕрдиреБрднрд╡ рдХрд╛ рд╕реНрддрд░ рдЪреБрдиреЗрдВ)",
      monthlyIncome: "рдХрдВрдЯреЗрдВрдЯ рд╕реЗ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдорд╛рд╕рд┐рдХ рдЖрдп рдХреНрдпрд╛ рд╣реИ?",
      biggestChallenge:
        "рдЖрдкрдХреА рд╕рдмрд╕реЗ рдмрдбрд╝реА рдЪреБрдиреМрддрд┐рдпрд╛рдБ рдХреНрдпрд╛ рд╣реИрдВ? (рдЕрдзрд┐рдХрддрдо 3 рдЪреБрдиреЗрдВ)",
      goals:
        "рдЕрдЧрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЗ рдореБрдЦреНрдп рд▓рдХреНрд╖реНрдп рдХреНрдпрд╛ рд╣реИрдВ? (рдЕрдзрд┐рдХрддрдо 3 рдЪреБрдиреЗрдВ)",
      socialLinks: "рдЕрдкрдиреА рд╕реЛрд╢рд▓ рдЙрдкрд╕реНрдерд┐рддрд┐ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
      bio: "рдЕрдкрдиреЗ рдФрд░ рдЕрдкрдиреЗ рдХрдВрдЯреЗрдВрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рдФрд░ рдмрддрд╛рдПрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
      engagementRate: "рдЖрдкрдХрд╛ рдФрд╕рдд рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рд░реЗрдЯ рдХреНрдпрд╛ рд╣реИ?",
    },
    options: {
      platforms: [
        "рдЗрдВрд╕реНрдЯрд╛рдЧреНрд░рд╛рдо",
        "рдпреВрдЯреНрдпреВрдм",
        "рд▓рд┐рдВрдХреНрдбрдЗрди",
        "рдЯрд┐рдХрдЯреЙрдХ",
        "рдЯреНрд╡рд┐рдЯрд░",
        "рдлреЗрд╕рдмреБрдХ",
        "рд╡реЗрдмрд╕рд╛рдЗрдЯ/рдмреНрд▓реЙрдЧ",
      ],
      followerRanges: [
        "1K рд╕реЗ рдХрдо",
        "1K - 5K",
        "5K - 10K",
        "10K - 50K",
        "50K - 100K",
        "100K - 500K",
        "500K+",
      ],
      niches: [
        "рдлреИрд╢рди & рдмреНрдпреВрдЯреА",
        "рдЯреЗрдХреНрдиреЛрд▓реЙрдЬреА рдФрд░ AI",
        "рдЦрд╛рдирд╛ рдФрд░ рдЦрд╛рдирд╛ рдмрдирд╛рдирд╛",
        "рдпрд╛рддреНрд░рд╛ рдФрд░ рдПрдбрд╡реЗрдВрдЪрд░",
        "рдлрд┐рдЯрдиреЗрд╕ рдФрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп",
        "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд┐рддреНрдд рдФрд░ рдирд┐рд╡реЗрд╢",
        "рдордиреЛрд░рдВрдЬрди рдФрд░ рдХреЙрдореЗрдбреА",
        "рдЙрджреНрдпрдорд┐рддрд╛ рдФрд░ рд╡реНрдпрд╛рдкрд╛рд░",
        "рд▓рд╛рдЗрдлрд╕реНрдЯрд╛рдЗрд▓ рдФрд░ рд╡реЗрд▓рдиреЗрд╕",
        "рдХрд▓рд╛ рдФрд░ рдбрд┐рдЬрд╝рд╛рдЗрди",
        "рдЧреЗрдорд┐рдВрдЧ рдФрд░ рдИрд╕реНрдкреЛрд░реНрдЯреНрд╕",
        "рд╕рдВрдЧреАрдд рдФрд░ рдиреГрддреНрдп",
        "рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рд╕реАрдЦрдирд╛",
        "рдЦреЗрд▓ рдФрд░ рдПрдерд▓реЗрдЯрд┐рдХреНрд╕",
        "рдкреНрд░реЗрд░рдгрд╛ рдФрд░ рд╕реНрд╡-рд╕рд╣рд╛рдпрддрд╛",
        "рдкреЗрд░реЗрдВрдЯрд┐рдВрдЧ рдФрд░ рдкрд░рд┐рд╡рд╛рд░",
        "DIY рдФрд░ рд╢рд┐рд▓реНрдк",
        "рдЖрдзреНрдпрд╛рддреНрдо рдФрд░ рдорд╛рдЗрдВрдбрдлреБрд▓рдиреЗрд╕",
        "рдЕрдиреНрдп",
      ],
      contentTypes: [
        "рдлреЛрдЯреЛ рдФрд░ рдХреИрд░реЛрд╕реЗрд▓",
        "рдЫреЛрдЯреЗ рд╡реАрдбрд┐рдпреЛ/рд░рд┐рд▓реНрд╕",
        "рд▓рдВрдмреЗ рд╡реАрдбрд┐рдпреЛ",
        "рд▓рд╛рдЗрд╡ рд╕реНрдЯреНрд░реАрдо",
        "рд╕реНрдЯреЛрд░реАрдЬрд╝",
        "рд▓рд┐рдЦрд┐рдд рдкреЛрд╕реНрдЯ",
        "рдкреЙрдбрдХрд╛рд╕реНрдЯ",
        "рдорд┐рд╢реНрд░рд┐рдд рдХрдВрдЯреЗрдВрдЯ",
      ],
      frequencies: [
        "рд░реЛрдЬрд╝рд╛рдирд╛",
        "рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 3-4 рдмрд╛рд░",
        "рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ",
        "рдорд╣реАрдиреЗ рдореЗрдВ 2-3 рдмрд╛рд░",
        "рдорд╣реАрдиреЗ рдореЗрдВ 1 рдмрд╛рд░",
        "рдЕрдирд┐рдпрдорд┐рдд",
      ],
      experiences: [
        "рдЕрднреА рд╢реБрд░реВ рдХрд┐рдпрд╛ (0-6 рдорд╣реАрдиреЗ)",
        "рд╢реБрд░реБрдЖрддреА (6 рдорд╣реАрдиреЗ - 1 рд╕рд╛рд▓)",
        "рдмрдврд╝ рд░рд╣рд╛ (1-2 рд╕рд╛рд▓)",
        "рдЕрдиреБрднрд╡реА (2-3 рд╕рд╛рд▓)",
        "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ (3+ рд╕рд╛рд▓)",
      ],
      incomes: [
        "тВ╣0 (рдЕрднреА рддрдХ рдХреЛрдИ рдЖрдп рдирд╣реАрдВ)",
        "тВ╣1KтАУ5K",
        "тВ╣5KтАУ15K",
        "тВ╣15KтАУ30K",
        "тВ╣30KтАУ50K",
        "тВ╣50KтАУ1L",
        "тВ╣1L+",
      ],
      challenges: [
        "ЁЯФД Growth & Engagement: Low views & inconsistent engagement",
        "ЁЯза Growth & Engagement: Staying relevant with fast-moving trends",
        "ЁЯФБ Growth & Engagement: Algorithm changes killing reach",
        "ЁЯзНтАНтЩАя╕П Growth & Engagement: Competing with bigger creators",
        "ЁЯЧгя╕П Brand & Identity: Struggling to find my unique voice/style",
        "ЁЯдЭ Brand & Identity: Balancing authenticity with brand appeal",
        "ЁЯМ▒ Brand & Identity: Building a real, connected community",
        "ЁЯТФ Monetization & Scaling: Can't convert followers into paying customers",
        "ЁЯдЭ Monetization & Scaling: Not landing brand collaborations",
        "ЁЯУК Monetization & Scaling: Confused by analytics & metrics",
        "ЁЯе╡ Creator Wellness: Burnout & content fatigue",
        "ЁЯТм Creator Wellness: Handling trolls/negativity",
        "ЁЯУ▒ Creator Wellness: Managing too many platforms at once",
      ],
      goals: [
        "рдорд╛рд╕рд┐рдХ рдЖрдп рдмрдврд╝рд╛рдирд╛ (тВ╣25K/тВ╣50K/тВ╣1L+)",
        "10K / 50K / 100K+ Followers рддрдХ рдкрд╣реБрдБрдЪрд╛рдирд╛",
        "рдмреНрд░рд╛рдВрдб рд╕рд╛рдЭреЗрджрд╛рд░рд┐рдпрд╛рдБ рдкрд╛рдирд╛",
        "рдкрд░реНрд╕рдирд▓ рдмреНрд░рд╛рдВрдб рдмрдирд╛рдирд╛",
        "рд╡рд╛рдпрд░рд▓ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛рдирд╛",
        "рдХрдВрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рдкреЛрд╕реНрдЯрд┐рдВрдЧ рдмрдврд╝рд╛рдирд╛",
        "рдирдП рдкреНрд▓реЗрдЯрдлреЙрд░реНрдореНрд╕ рдкрд░ рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░рдирд╛",
      ],
      engagementRates: [
        "1% рд╕реЗ рдХрдо",
        "1-3%",
        "3-5%",
        "5-8%",
        "8-12%",
        "12% рд╕реЗ рдЕрдзрд┐рдХ",
        "рдореБрдЭреЗ рдирд╣реАрдВ рдкрддрд╛",
      ],
    },
    buttons: {
      next: "рдЕрдЧрд▓рд╛ рдХрджрдо",
      back: "рдкрд┐рдЫрд▓рд╛",
      submit: "рдореЗрд░рд╛ рдХреНрд░рд┐рдПрдЯрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд╛рдПрдВ",
    },
    freeResources: {
      title: "ЁЯОЙ рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛! рдЖрдкрдХреЗ рдореБрдлреНрдд рдХреНрд░рд┐рдПрдЯрд░ рд╕рдВрд╕рд╛рдзрди",
      subtitle: "рдЕрдкрдиреА рдХреНрд░рд┐рдПрдЯрд░ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпреЗ рдЙрдкрдХрд░рдг рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
      mediaKit: {
        title: "рдкреНрд░реЛрдлреЗрд╢рдирд▓ рдореАрдбрд┐рдпрд╛ рдХрд┐рдЯ рдЯреЗрдореНрдкрд▓реЗрдЯ",
        description: "рдЖрдХрд░реНрд╖рдХ рдореАрдбрд┐рдпрд╛ рдХрд┐рдЯ рдмрдирд╛рдПрдВ рдЬреЛ рдмреНрд░рд╛рдВрдбреНрд╕ рдкрд╕рдВрдж рдХрд░реЗрдВ",
      },
      emailTemplates: {
        title: "рдмреНрд░рд╛рдВрдб рдЖрдЙрдЯрд░реАрдЪ рдИрдореЗрд▓ рдЯреЗрдореНрдкрд▓реЗрдЯреНрд╕",
        description: "рдмреНрд░рд╛рдВрдб рдкрд╛рд░реНрдЯрдирд░рд╢рд┐рдк рдХреЗ рд▓рд┐рдП 30+ рд╕рд┐рджреНрдз рдИрдореЗрд▓ рдЯреЗрдореНрдкрд▓реЗрдЯреНрд╕",
      },
      growthGuide: {
        title: "90-рджрд┐рди рдЧреНрд░реЛрде рд╕реНрдЯреНрд░реИрдЯреЗрдЬреА рдЧрд╛рдЗрдб",
        description: "рдЕрдкрдиреЗ рдлреЙрд▓реЛрдЗрдВрдЧ рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрдЯреЗрдк-рдмрд╛рдИ-рд╕реНрдЯреЗрдк рд░реЛрдбрдореИрдк",
      },
      downloadFree: "рдореБрдлреНрдд рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
    },
  },
};

export default function Quiz() {
  const [currentStep, setCurrentStep] = useState(1);
  const [quizData, setQuizData] = useState<QuizData>(initialQuizData);
  const [language, setLanguage] = useState<"english" | "hindi">("english");
  const [isGenerating, setIsGenerating] = useState(false);
  const [showFreeResources, setShowFreeResources] = useState(false);
  const navigate = useNavigate();
  const quizContentRef = useRef<HTMLDivElement>(null);

  const t = languages[language];
  const totalSteps = 13;

  // Save language preference and update quiz data when language changes
  React.useEffect(() => {
    localStorage.setItem("famechase-language", language);
    setQuizData((prev) => ({ ...prev, language: language }));
  }, [language]);

  // Scroll to top when quiz page loads
  React.useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, []);

  // Scroll to top when free resources page is shown
  React.useEffect(() => {
    if (showFreeResources) {
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, [showFreeResources]);

  const updateQuizData = (field: keyof QuizData, value: any) => {
    setQuizData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const updateSocialLink = (
    platform: keyof QuizData["socialLinks"],
    value: string,
  ) => {
    setQuizData((prev) => ({
      ...prev,
      socialLinks: {
        ...prev.socialLinks,
        [platform]: value,
      },
    }));
  };

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return quizData.primaryPlatform;
      case 2:
        return quizData.followerCount;
      case 3:
        return quizData.secondaryPlatforms.length > 0;
      case 4:
        return quizData.niche;
      case 5:
        return quizData.contentType;
      case 6:
        return quizData.postingFrequency;
      case 7:
        return quizData.experience.length > 0;
      case 8:
        return quizData.monthlyIncome;
      case 9:
        return quizData.biggestChallenge.length >= 1;
      case 10:
        return quizData.goals.length > 0;
      case 11:
        return true; // Optional step (social links)
      case 12:
        return quizData.engagementRate;
      case 13:
        return quizData.name && quizData.email && quizData.city; // Contact info at end
      default:
        return false;
    }
  };

  const handleNext = () => {
    if (currentStep < totalSteps && canProceed()) {
      setCurrentStep(currentStep + 1);
      // Auto-scroll to quiz content area (just below header)
      setTimeout(() => {
        if (quizContentRef.current) {
          quizContentRef.current.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }, 100);
    } else if (currentStep === totalSteps) {
      setShowFreeResources(true);
      // Auto-scroll to top when showing free resources page
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }, 100);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      // Auto-scroll to quiz content area (just below header)
      setTimeout(() => {
        if (quizContentRef.current) {
          quizContentRef.current.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }, 100);
    }
  };

  const handleSubmit = async () => {
    setIsGenerating(true);

    try {
      // Save quiz data with selected language preference
      const finalQuizData = { ...quizData, language: language };
      localStorage.setItem("fameChaseQuizData", JSON.stringify(finalQuizData));

      // Save user data to Supabase if configured
      if (isSupabaseConfigured() && supabase) {
        const userData = {
          name: quizData.name,
          email: quizData.email,
          phone: quizData.phone || null,
          city: quizData.city,
          niche: quizData.niche,
          primary_platform: quizData.primaryPlatform,
          follower_count: quizData.followerCount,
          goals: quizData.goals,
          quiz_data: finalQuizData,
        };

        const { error } = await supabase.from("users").upsert([userData], {
          onConflict: "email",
          ignoreDuplicates: false,
        });

        if (error) {
          console.error("Error saving user data to Supabase:", error);
          // Continue anyway - don't block the user experience
        } else {
          console.log("User data saved to Supabase successfully");
        }
      }

      // Small delay for user experience
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Navigate to results with immediate scroll to top
      navigate("/results");

      // Force immediate scroll to top of results page
      window.scrollTo({ top: 0, behavior: "auto" });

      // Additional scroll after navigation completes
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }, 50);
    } catch (error) {
      console.error("Error in handleSubmit:", error);
      // Continue with navigation even if there's an error
      navigate("/results");
      window.scrollTo({ top: 0, behavior: "auto" });
    } finally {
      setIsGenerating(false);
    }
  };

  const toggleSecondaryPlatform = (platform: string) => {
    const platforms = quizData.secondaryPlatforms.includes(platform)
      ? quizData.secondaryPlatforms.filter((p) => p !== platform)
      : [...quizData.secondaryPlatforms, platform];
    updateQuizData("secondaryPlatforms", platforms);
  };

  const toggleMultipleChoice = (
    field: "experience" | "biggestChallenge" | "goals",
    value: string,
    maxSelection?: number,
  ) => {
    const currentValues = quizData[field];
    if (currentValues.includes(value)) {
      const newValues = currentValues.filter((v) => v !== value);
      updateQuizData(field, newValues);
    } else {
      if (!maxSelection || currentValues.length < maxSelection) {
        const newValues = [...currentValues, value];
        updateQuizData(field, newValues);
      }
    }
  };

  const generateDownload = (type: string, fileName: string) => {
    let content = "";
    const userName = quizData.name || "Creator";

    // Add font size indicator for much larger display
    const fontSizeIndicator = `
 === DISPLAY INSTRUCTIONS ===
 IMPORTANT: Set Font Size to 18-22pt for comfortable reading
 Please zoom to 150-200% or increase font size in your viewer
 This content is optimized for larger text display for better readability
 ========================================================

 `;

    if (type === "mediaKit") {
      content =
        fontSizeIndicator +
        `${language === "hindi" ? "рдореАрдбрдпрд╛ рдХрд┐рдЯ" : "MEDIA KIT"} - ${userName}

 ${language === "hindi" ? "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА:" : "PERSONAL INFO:"}
 ${language === "hindi" ? "рдирд╛рдо:" : "Name:"} ${userName}
 ${language === "hindi" ? "рдирд┐рдЪ:" : "Niche:"} ${quizData.niche}
 ${language === "hindi" ? "рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо:" : "Platform:"} ${quizData.primaryPlatform}
 ${language === "hindi" ? "рдлреЙрд▓реЛрдЕрд░реНрд╕:" : "Followers:"} ${quizData.followerCount}

 ${language === "hindi" ? "рд╕рд╛рдВрдЦреНрдпрд┐рдХреА рдФрд░ рджрд░реЗрдВ:" : "STATISTICS & RATES:"}
 ${language === "hindi" ? "рдХрдВрдЯреЗрдВрдЯ рдкреНрд░рдХрд╛рд░:" : "Content Type:"} ${quizData.contentType}
 ${language === "hindi" ? "рдкреЛрд╕реНрдЯрд┐рдВрдЧ рдЖрд╡реГрддреНрддрд┐:" : "Posting Frequency:"} ${quizData.postingFrequency}
 ${language === "hindi" ? "рдорд╛рд╕рд┐рдХ рдЖрдп:" : "Monthly Income:"} ${quizData.monthlyIncome}

 ${language === "hindi" ? "рд╕реБрдЭрд╛рд╡рд┐рдд рджрд░реЗрдВ (рднрд╛рд░рддреАрдп рдмрд╛рдЬрд╛рд░ рдХреЗ рдЖрдзрд╛рд░ рдкрд░):" : "SUGGESTED RATES (Based on Indian Market):"}

 ${language === "hindi" ? "Instagram рдкреЛрд╕реНрдЯ:" : "Instagram Post:"} ...`;
    } else if (type === "emailTemplates") {
      content = fontSizeIndicator + `${language === "hindi" ? "рдИрдореЗрд▓ рдЯреЗрдореНрдкрд▓реЗрдЯреНрд╕" : "EMAIL TEMPLATES"} - ${userName}\n\n...`;
    } else if (type === "growthStrategy") {
      content = fontSizeIndicator + `${language === "hindi" ? "90-рджрд┐рди рдЧреНрд░реЛрде рд░рдгрдиреАрддрд┐" : "90-DAY GROWTH STRATEGY"} - ${userName}\n\n...`;
    }

    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (showFreeResources) {
    return (
      <div className="min-h-screen bg-white">
        {/* Header */}
        <header className="relative z-10 px-4 py-6 bg-white border-b border-gray-100 sticky top-0 backdrop-blur-sm">
          <div className="container mx-auto flex justify-between items-center">
            <Link to="/" className="text-lg font-bold text-gray-900">
              FameChase<span className="text-neon-green">.com</span>
            </Link>

            <div className="flex items-center gap-4">
              <Link
                to="/"
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <Home className="w-4 h-4" />
                Back to Home
              </Link>
              {/* Language Selector */}
              <select
                value={language}
                onChange={(e) =>
                  setLanguage(e.target.value as "english" | "hindi")
                }
                className="bg-white border border-gray-300 text-gray-900 px-3 py-2 rounded-lg text-sm font-medium"
              >
                <option value="english">English</option>
                <option value="hindi">рд╣рд┐рдВрджреА</option>
              </select>
            </div>
          </div>
        </header>

        <main className="container mx-auto px-4 py-12">
          <div className="max-w-4xl mx-auto text-center">
            <div className="w-20 h-20 bg-gradient-to-r from-neon-green to-electric-blue rounded-full flex items-center justify-center mx-auto mb-6">
              <CheckCircle className="w-10 h-10 text-white" />
            </div>

            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              {t.freeResources.title}
            </h1>
            <p className="text-xl text-gray-600 mb-12 max-w-2xl mx-auto">
              {t.freeResources.subtitle}
            </p>

            <div className="grid md:grid-cols-3 gap-8 mb-12">
              {/* Basic Media Kit Template - FREE VERSION */}
              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <FileText className="w-8 h-8 text-blue-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Media Kit Template
                </h3>
                <p className="text-gray-600 mb-4">
                  Simple media kit template with basic stats and contact info -
                  perfect for getting started
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ Professional template format
                  <br />
                  тЬУ Industry-standard rate suggestions
                  <br />
                  тЬУ Easy customization fields
                  <br />тЬУ Multi-platform rate structure
                </div>
                <button
                  onClick={() =>
                    generateDownload(
                      "mediaKit",
                      `${quizData.name || "Creator"}_Basic_Media_Kit_${language}.txt`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>

              {/* Email Templates - FREE VERSION */}
              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Mail className="w-8 h-8 text-green-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Email Templates (6)
                </h3>
                <p className="text-gray-600 mb-4">
                  Essential outreach templates to get you started with brand
                  partnerships
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ 6 proven email templates
                  <br />
                  тЬУ Professional follow-up sequences
                  <br />
                  тЬУ Ready-to-use pitch formats
                  <br />тЬУ Brand outreach best practices
                </div>
                <button
                  onClick={() =>
                    generateDownload(
                      "emailTemplates",
                      `Basic_Email_Templates_${language}.txt`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>

              {/* Growth Strategy - FREE VERSION */}
              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Target className="w-8 h-8 text-purple-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Growth Guide (30-Day)
                </h3>
                <p className="text-gray-600 mb-4">
                  Simple 30-day action plan to get you started on your growth
                  journey
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ Comprehensive 30-day action plan
                  <br />
                  тЬУ Proven growth strategies
                  <br />
                  тЬУ Daily actionable tasks
                  <br />тЬУ Progress tracking templates
                </div>
                <button
                  onClick={() =>
                    generateDownload(
                      "growthStrategy",
                      `Basic_Growth_Guide_${language}.txt`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>
            </div>

            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border-2 border-yellow-200 rounded-2xl p-8">
              <h2 className="text-lg font-bold text-gray-900 mb-4">
                {language === "hindi"
                  ? "рдЕрдкрдирд╛ рдкреВрд░рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
                  : "Want Your Complete Analysis?"}
              </h2>
              <p className="text-gray-600 mb-6">
                {language === "hindi"
                  ? "рд╡реНрдпрдХреНрддрд┐рдЧрдд SWOT рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рд░рдгрдиреАрддрд┐, рдФрд░ рдкреНрд░реАрдорд┐рдпрдо рдЯреВрд▓реНрд╕ рдХреЗ рд╕рд╛рде рдЕрдкрдиреЗ рдХреНрд░рд┐рдПрдЯрд░ рдХрд░рд┐рдпрд░ рдХреЛ рддреЗрдЬрд╝ рдХрд░реЗрдВред"
                  : "Get personalized SWOT analysis, growth strategy, and premium tools to accelerate your creator journey."}
              </p>
              <button
                onClick={handleSubmit}
                className="bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-4 px-8 rounded-xl text-lg hover:shadow-lg hover:scale-105 transition-all duration-300"
              >
                <Sparkles className="w-5 h-5 inline mr-2" />
                {t.buttons.submit}
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="relative z-10 px-2 md:px-4 py-3 md:py-4 bg-white border-b border-gray-100 sticky top-0 backdrop-blur-sm">
        <div className="container mx-auto flex justify-between items-center">
          <Link to="/" className="text-base md:text-lg font-bold text-gray-900">
            FameChase<span className="text-neon-green">.com</span>
          </Link>

          <div className="flex items-center gap-2 md:gap-4">
            <Link
              to="/"
              className="flex items-center gap-1 md:gap-2 text-gray-600 hover:text-gray-900 transition-colors text-sm md:text-base"
            >
              <Home className="w-3 h-3 md:w-4 md:h-4" />
              <span className="hidden sm:inline">Back to Home</span>
              <span className="sm:hidden">Home</span>
            </Link>
            {/* Language Selector */}
            <select
              value={language}
              onChange={(e) =>
                setLanguage(e.target.value as "english" | "hindi")
              }
              className="bg-white border border-gray-300 text-gray-900 px-2 py-1 md:px-3 md:py-2 rounded-lg text-xs md:text-sm font-medium"
            >
              <option value="english">English</option>
              <option value="hindi">рд╣рд┐рдВрджреА</option>
            </select>
          </div>
        </div>
      </header>

      {/* Quiz Content */}
      <main
        ref={quizContentRef}
        className="container mx-auto px-2 md:px-4 py-2"
      >
        <div className="max-w-xl mx-auto">
          <div className="text-center mb-4 md:mb-6">
            <h1 className="text-2xl md:text-4xl font-bold text-gray-900 mb-2 md:mb-4">
              {t.title}
            </h1>
            <p className="text-sm md:text-lg text-gray-600 leading-relaxed px-2">
              {t.subtitle}
            </p>

            {/* Animated Icons */}
            <div className="flex justify-center gap-3 mt-3">
              <Sparkles className="w-4 h-4 md:w-6 md:h-6 text-neon-green animate-pulse" />
              <Star className="w-4 h-4 md:w-6 md:h-6 text-electric-blue animate-pulse" />
              <Target className="w-4 h-4 md:w-6 md:h-6 text-soft-violet animate-pulse" />
            </div>
          </div>

          <div className="bg-white border-2 border-gray-100 rounded-2xl p-4 md:p-8 shadow-xl backdrop-blur-sm min-h-[70vh] flex flex-col justify-between">
            {/* Loading State */}
            {isGenerating && (
              <div className="text-center py-12">
                <div className="w-20 h-20 bg-gradient-to-r from-neon-green to-electric-blue rounded-full flex items-center justify-center mx-auto mb-6 animate-spin">
                  <Sparkles className="w-10 h-10 text-white" />
                </div>
                <h2 className="text-lg font-bold text-gray-900 mb-4">
                  Generating Your Creator Analysis...
                </h2>
                <p className="text-gray-600">
                  Our AI is analyzing your responses and creating your
                  personalized toolkit
                </p>
              </div>
            )}

            {!isGenerating && (
              <>