import React, { useState, useRef, useEffect } from "react";
import {
  ArrowRight,
  ArrowLeft,
  Instagram,
  Youtube,
  Linkedin,
  Globe,
  ChevronDown,
  Twitter,
  Star,
  Target,
  TrendingUp,
  CheckCircle,
  Sparkles,
  User,
  Mail,
  MapPin,
  Calendar,
  Download,
  Home,
  FileText,
  Layout,
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { supabase, isSupabaseConfigured } from "@/lib/supabase";
import { sanitizeDeep } from "@/lib/sanitize";
import { downloadFile } from "@/lib/products";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface QuizData {
  name: string;
  email: string;
  phone: string;
  age: string;
  city: string;
  primaryPlatform: string;
  secondaryPlatforms: string[];
  followerCount: string;
  niche: string;
  contentType: string;
  postingFrequency: string;
  experience: string[];
  monthlyIncome: string;
  biggestChallenge: string[];
  goals: string[];
  socialLinks: {
    instagram: string;
    youtube: string;
    linkedin: string;
    website: string;
    twitter: string;
    tiktok: string;
  };
  bio: string;
  language: string;
  engagementRate: string;
}

const initialQuizData: QuizData = {
  name: "",
  email: "",
  phone: "",
  age: "",
  city: "",
  primaryPlatform: "",
  secondaryPlatforms: [],
  followerCount: "",
  niche: "",
  contentType: "",
  postingFrequency: "",
  experience: [],
  monthlyIncome: "",
  biggestChallenge: [],
  goals: [],
  socialLinks: {
    instagram: "",
    youtube: "",
    linkedin: "",
    website: "",
    twitter: "",
    tiktok: "",
  },
  bio: "",
  language: "english",
  engagementRate: "",
};

const languages = {
  english: {
    title: "Creator Success Quiz",
    subtitle: "Get your personalized growth strategy in 3 minutes",
    steps: {
      1: "Platform & Followers",
      2: "Follower Count",
      3: "Other Platforms",
      4: "Content Niche",
      5: "Content Type",
      6: "Posting Frequency",
      7: "Experience",
      8: "Income",
      9: "Biggest Challenge",
      10: "Goals",
      11: "Social Links",
      12: "Engagement Rate",
      13: "Contact Info",
    },
    questions: {
      name: "What's your name?",
      email: "What's your email address?",
      phone: "What's your phone number? (Optional)",
      city: "Which city are you from?",
      primaryPlatform: "What's your primary content platform?",
      followerCount: "How many followers do you have on your primary platform?",
      secondaryPlatforms:
        "Which other platforms do you use? (Select all that apply)",
      niche: "What's your content niche?",
      contentType: "What type of content do you create?",
      postingFrequency: "How often do you post content?",
      experience:
        "How long have you been creating content? (Select all levels you've experienced)",
      monthlyIncome: "What's your current monthly income from content?",
      biggestChallenge:
        "What are your biggest challenges as a creator? (Select max 3)",
      goals: "What are your main goals for the next 6 months? (Select max 3)",
      socialLinks: "Share Your Social Presence (Optional)",
      bio: "Anything more about yourself and your content (optional)",
      engagementRate:
        "What's your average engagement rate? (Average Engagement Rate = (Total Likes + Comments + Shares) ├╖ Total Followers ├Ч 100)",
    },
    options: {
      platforms: [
        "Instagram",
        "YouTube",
        "LinkedIn",
        "TikTok",
        "Twitter",
        "Facebook",
        "Website/Blog",
      ],
      followerRanges: [
        "Less than 1K",
        "1K - 5K",
        "5K - 10K",
        "10K - 50K",
        "50K - 100K",
        "100K - 500K",
        "500K+",
      ],
      niches: [
        "Fashion & Beauty",
        "Technology & AI",
        "Food & Cooking",
        "Travel & Adventure",
        "Fitness & Health",
        "Personal Finance & Investing",
        "Entertainment & Comedy",
        "Entrepreneurship & Business",
        "Lifestyle & Wellness",
        "Art & Design",
        "Gaming & Esports",
        "Music & Dance",
        "Education & Learning",
        "Sports & Athletics",
        "Motivation & Self-Help",
        "Parenting & Family",
        "DIY & Crafts",
        "Spirituality & Mindfulness",
        "Other",
      ],
      contentTypes: [
        "Photos & Carousels",
        "Short Videos/Reels",
        "Long-form Videos",
        "Live Streams",
        "Stories",
        "Written Posts",
        "Podcasts",
        "Mixed Content",
      ],
      frequencies: [
        "Daily",
        "3-4 times a week",
        "Weekly",
        "2-3 times a month",
        "Monthly",
        "Irregular",
      ],
      experiences: [
        "Just started (0-6 months)",
        "Beginner (6 months - 1 year)",
        "Growing (1-2 years)",
        "Experienced (2-3 years)",
        "Expert (3+ years)",
      ],
      incomes: [
        "тВ╣0 (No income yet)",
        "тВ╣1KтАУ5K",
        "тВ╣5KтАУ15K",
        "тВ╣15KтАУ30K",
        "тВ╣30KтАУ50K",
        "тВ╣50KтАУ1L",
        "тВ╣1L+",
      ],
      challenges: [
        "ЁЯФД Growth & Engagement: Low views & inconsistent engagement",
        "ЁЯза Growth & Engagement: Staying relevant with fast-moving trends",
        "ЁЯФБ Growth & Engagement: Algorithm changes killing reach",
        "ЁЯзНтАНтЩАя╕П Growth & Engagement: Competing with bigger creators",
        "ЁЯЧгя╕П Brand & Identity: Struggling to find my unique voice/style",
        "ЁЯдЭ Brand & Identity: Balancing authenticity with brand appeal",
        "ЁЯМ▒ Brand & Identity: Building a real, connected community",
        "ЁЯТФ Monetization & Scaling: Can't convert followers into paying customers",
        "ЁЯдЭ Monetization & Scaling: Not landing brand collaborations",
        "ЁЯУК Monetization & Scaling: Confused by analytics & metrics",
        "ЁЯе╡ Creator Wellness: Burnout & content fatigue",
        "ЁЯТм Creator Wellness: Handling trolls/negativity",
        "ЁЯУ▒ Creator Wellness: Managing too many platforms at once",
      ],
      goals: [
        "Reach 10K / 50K / 100K+ Followers",
        "Earn тВ╣25K / тВ╣50K / тВ╣1L+ per month",
        "Get Brand Collaborations",
        "Build Personal Brand",
        "Create Viral Content",
        "Post More Consistently",
        "Expand to New Platforms",
      ],
      engagementRates: [
        "Less than 1%",
        "1-3%",
        "3-5%",
        "5-8%",
        "8-12%",
        "More than 12%",
        "I don't know",
      ],
    },
    buttons: {
      next: "Next Step",
      back: "Previous",
      submit: "Get My Creator Analysis",
    },
    freeResources: {
      title: "ЁЯОЙ Quiz Complete! Here are your FREE Creator Resources",
      subtitle:
        "Download these powerful tools to kickstart your creator journey",
      mediaKit: {
        title: "Professional Media Kit Template",
        description: "Create stunning media kits that brands will love",
      },
      emailTemplates: {
        title: "Brand Outreach Email Templates",
        description: "30+ proven email templates for brand partnerships",
      },
      growthGuide: {
        title: "90-Day Growth Strategy Guide",
        description: "Step-by-step roadmap to grow your following",
      },
      downloadFree: "Download Free",
    },
  },
  hindi: {
    title: "я┐╜я┐╜я┐╜реНрд░рд┐рдПрдЯрд░ рд╕рдХреНрд╕реЗрд╕ рдХреНрд╡рд┐рдЬрд╝",
    subtitle: "3 рдорд┐рдирдЯ рдореЗрдВ рдЕрдкрдиреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЧреНрд░реЛрде рд░рдгрдиреАрддрд┐ рдкрд╛рдПрдВ",
    steps: {
      1: "рдмреБрдия┐╜я┐╜рдпрд╛рджреА рдЬрд╛рдирдХрд╛рд░реА",
      2: "рдкя┐╜я┐╜рд▓реЗрдЯрдлреЙрд░реНрдо рдФрд░ рдлреЙрд▓реЛрдЕрд░реНрд╕",
      3: "рдХрдВрдЯреЗрдВрдЯ рдирд┐рдЪ",
      4: "рдХрдВрдЯреЗрдВрдЯ рдкреНрд░рдХрд╛рд░",
      5: "рдкреЛрд╕реНрдЯрд┐рдВрдЧ рдЖрд╡реГрддреНрддрд┐",
      6: "рдЕрдиреБрднрд╡ рдФрд░ рдЖрдп",
      7: "рд╕рдмрд╕реЗ рдмрдбрд╝реА рдЪя┐╜я┐╜рдиреМрддреА",
      8: "рд▓рдХреНрд╖реНрдп",
      9: "рд╕реЛрд╢рд▓ рд▓рд┐рдВрдХреНрд╕",
      10: "рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рд░реЗрдЯ",
    },
    questions: {
      name: "рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
      email: "рдЖрдкрдХрд╛ рдИрдореЗрд▓ рдкрддрд╛ рдХреНрдпрд╛ рд╣реИ?",
      phone: "рдЖрдкрдХрд╛ рдлреЛрди рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ? (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
      city: "рдЖрдк рдХрд┐рд╕ рд╢рд╣рд░ рд╕реЗ рд╣реИрдВ?",
      primaryPlatform: "рдЖрдк рдореБрдЦреНрдпрддрдГ рдХрд┐рд╕ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдкрд░ рдХрдВя┐╜я┐╜реЗрдВрдЯ рдмрдия┐╜я┐╜я┐╜рддреЗ рд╣реИрдВ?",
      followerCount: "я┐╜я┐╜рдкрдХреЗ рдкреНрд░рд╛рдердорд┐рдХ рдкя┐╜я┐╜рд▓реЗрдЯрдлреЙрд░реНя┐╜я┐╜ рдкрд░ рдХрд┐рддрдиреЗ рдлреЙрд▓реЛрдЕрд░реНрд╕ рд╣реИрдВ?",
      secondaryPlatforms:
        "рдЖрдк рдФрд░ я┐╜я┐╜реМрди рд╕реЗ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ? (рдХрдИ рд╡рд┐рдХрд▓реНрдк я┐╜я┐╜я┐╜реБрдиреЗрдВ)",
      niche: "рдЖрдкрдХрд╛ рдХрдВрдЯреЗрдВя┐╜я┐╜ рдХрд┐рд╕ рд╡рд┐рд╖рдп рдкрд░ рд╣реИ?",
      contentType: "рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛я┐╜я┐╜реЗ рд╣реИя┐╜я┐╜я┐╜?",
      postingFrequency: "рдЖрдк рдХрд┐рддрдиреА рдмрд╛рд░ рдХрдВрдЯреЗрдВрдЯ рдкреЛрд╕реНрдЯ рдХрд░рддреЗ рд╣реИрдВ?",
      experience:
        "рдЖрдк рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ? (рд╕рднреА рд╕реНрддрд░ рдЪреБрдиреЗрдВ рдЬрд┐рдирдХрд╛ рдЖрдкрдиреЗ рдЕрдиреБрднрд╡ рдХрд┐рдпрд╛ рд╣реИ)",
      monthlyIncome: "рдХрдВрдЯреЗрдВрдЯ рд╕реЗ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рдорд╛рд╕рд┐рдХ рдЖрдп рдХреНрдпрд╛ рд╣реИ?",
      engagementRate:
        "рдЖрдкрдХрд╛ рдФрд╕рдд рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рд░реЗрдЯ рдХреНрдпрд╛ рд╣реИ? (рдФрд╕рдд рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рд░реЗрдЯ = (рдХреБрд▓ рд▓рд╛рдЗрдХ + рдХрдореЗрдВрдЯ + рд╢реЗрдпрд░) ├╖ рдХреБрд▓ рдлреЙрд▓реЛрдЕрд░реНя┐╜я┐╜ ├Ч 100)",
      biggestChallenge:
        "рдЖрдкрдХреА рд╕рдмрд╕реЗ рдмрдбрд╝реА рдЪреБрдиреМрддреА рдХреНрдпя┐╜я┐╜я┐╜ рд╣реИ? 3 рддрдХ рдЪреБрдиреЗрдВ тАУ рд╣рдо рд╕рдм рдЗрд╕рдореЗрдВ рдПрдХ рд╕рд╛рде рд╣реИрдВ! рдЖрдкрдХреА рдкрд░реЗрд╢рд╛рдирд┐рдпреЛрдВ рдХреЛ рд╕рдордЭрдирд╛ рд╣рдореЗрдВ рдмреЗрд╣рддрд░ рд╕рдорд╛рдзрд╛рди рджреЗрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред",
      goals: "рдЖрдкрдХреЗ рдЕрдЧрд▓реЗ 6 рдорд╣реАрдиреЗ рдХреЗ рдореБрдЦреНрдп рд▓рдХреНрд╖реНрдп рдХреНрдпрд╛ рд╣реИрдВ? (рдЕрдзрд┐рдХрддя┐╜я┐╜я┐╜ 3 рдЪреБрдиреЗрдВ)",
      socialLinks: "рдЕрдкрдия┐╜я┐╜я┐╜ рд╕я┐╜я┐╜рд╢рд▓ рдЙрдкрд╕реНрдерд┐рддрд┐ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
      bio: "рдЕрдкрдиреЗ рдФрд░ рдЕрдкрдиреЗ рдХя┐╜я┐╜рдЯреЗрдВрдЯ я┐╜я┐╜я┐╜реЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рдФрд░ рдмрддрд╛рдПрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
    },
    options: {
      platforms: [
        "рдЗрдВрд╕реНрдЯрд╛рдЧреНрд░рд╛рдо",
        "рдпреВрдЯреНрдпреВрдм",
        "рд▓рд┐рдВрдХреНрдбрдЗрди",
        "рдЯрд┐рдХрдЯреЙрдХ",
        "рдЯреНрд╡рд┐рдЯрд░",
        "рдлреЗрд╕рдмреБрдХ",
        "рд╡реЗрдмрд╕рд╛рдЗрдЯ/рдмреНрд▓реЙрдЧ",
      ],
      followerRanges: [
        "1K рд╕реЗ рдХрдо",
        "1K - 5K",
        "5K - 10K",
        "10K - 50K",
        "50K - 100K",
        "100K - 500K",
        "500K+",
      ],
      niches: [
        "рдлреИрд╢рди рдФрд░ рдмреНрдпреВрдЯреА",
        "рдЯреЗрдХреНрдиреЛрд▓реЙрдЬреА рдФрд░ AI",
        "рдЦрд╛рдирд╛ рдФрд░ рдЦрд╛рдирд╛ рдмрдирд╛рдирд╛",
        "рдпрд╛рддреНрд░рд╛ рдФрд░ рдПрдбя┐╜я┐╜реЗрдВрдЪрд░",
        "рдлрд┐рдЯрдиреЗрд╕ рдФрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп",
        "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд┐рддреНрдд я┐╜я┐╜рд░ рдирд┐рд╡реЗрд╢",
        "рдордиреЛрд░рдВрдЬрди рдФрд░ рдХреЙрдореЗрдбреА",
        "рдЙрджреНрдпрдорд┐рддрд╛ рдФрд░ рд╡реНрдпрд╛рдкрд╛рд░",
        "рдЬреАрд╡рдирд╢реИрд▓реА рдФрд░ рдХрд▓реНрдпрд╛рдг",
        "рдХрд▓рд╛ рдФрд░ рдбрд┐рдЬрд╝рд╛рдЗрди",
        "рдЧреЗрдорд┐рдВрдЧ рдФрд░ рдИрд╕реНрдкреЛрд░реНрдЯреНрд╕",
        "рд╕рдВрдЧреАрдд я┐╜я┐╜рд░ рдиреГрддреНрдп",
        "рд╢рд┐рдХреНрд╖рд╛ рдФрд░ рд╕реАрдЦрдирд╛",
        "рдЦя┐╜я┐╜я┐╜рд▓ рдФрд░ рдПрдерд▓реЗрдЯрд┐рдХреНрд╕",
        "рдкреНрд░реЗрд░рдгрд╛ рдФрд░ рд╕реНрд╡-рд╕рд╣я┐╜я┐╜рдпрддрд╛",
        "рдкреЗрд░реЗрдВрдЯрд┐рдВрдЧ рдФрд░ рдкрд░рд┐рд╡рд╛рд░",
        "DIY рдФрд░ рд╢рд┐рд▓реНрдк",
        "рдЖрдзреНрдпрд╛рддреНрдо рдФрд░ рдорд╛рдЗрдВрдбрдлреБрд▓рдиреЗрд╕",
        "рдЕрдиреНрдп",
      ],
      engagementRates: [
        "1% рд╕реЗ рдХрдо",
        "1-3%",
        "3-5%",
        "5-8%",
        "8-12%",
        "12% рд╕реЗ рдЕрдзрд┐рдХ",
        "рдореБрдЭреЗ рдирд╣реАрдВ рдкрддрд╛",
      ],
      contentTypes: [
        "рдлреЛрдЯреЛ рдФрд░ рдХрд░реЛрд╕реЗрд▓",
        "рдЫреЛрдЯреЗ рд╡реАрдбрд┐рдпреЛ/рд░реАрд▓реНрд╕",
        "рд▓рдВрдмреЗ рд╡реАрдбрд┐я┐╜я┐╜я┐╜реЛ",
        "рд▓рд╛рдЗрд╡ рд╕реНрдЯреНрд░реАрдо",
        "рд╕реНрдЯреЛрд░реАрдЬрд╝",
        "рд▓рд┐рдЦрд┐рдд рдкреЛрд╕реНрдЯ",
        "рдкреЙрдбрдХрд╛рд╕реНрдЯ",
        "рдорд┐рд╢реНрд░рд┐рдд рдХрдВрдЯреЗрдВрдЯ",
      ],
      frequencies: [
        "рд░реЛрдЬрд╝рд╛рдирд╛",
        "рд╕рдкреНрддрд╛рд╣ я┐╜я┐╜я┐╜реЗрдВ 3-4 рдмрд╛рд░",
        "рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ",
        "рдорд╣реАрдиреЗ рдореЗрдВ 2-3 рдмрд╛рд░",
        "рдорд╛рд╕рд┐рдХ",
        "рдЕрдирд┐рдпрдорд┐рдд",
      ],
      experiences: [
        "рдЕрднреА рд╢реБрд░я┐╜я┐╜ рдХрд┐рдпрд╛ (0-6 рдорд╣реАрдиреЗ)",
        "рд╢реБрд░реБрдЖрддреА (6 рдорд╣реАрдиреЗ - 1 рд╕рд╛рд▓)",
        "рдмрдврд╝ рд░рд╣реЗ рд╣реИрдВ (1-2 рд╕рд╛рд▓)",
        "рдЕрдиреБрднрд╡реА (2-3 рд╕рд╛рд▓)",
        "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ (3+ рд╕рд╛рд▓)",
      ],
      incomes: [
        "тВ╣0 (рдЕрднреА рддрдХ рдХреЛрдИ рдЖрдп рдирд╣реАрдВ)",
        "тВ╣1KтАУ5K",
        "тВ╣5KтАУ15K",
        "тВ╣15KтАУ30K",
        "тВ╣30KтАУ50K",
        "тВ╣50KтАУ1L",
        "тВ╣1L+",
      ],
      challenges: [
        "ЁЯФД рдЧреНрд░реЛрде рдФрд░ рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ: рд╡реНрдпреВрдЬрд╝ рдХрдо рдФрд░ рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ рдЕрдирд┐рдпрдорд┐рдд",
        "ЁЯза рдЧреНрд░реЛрде рдФрд░ рдПя┐╜я┐╜я┐╜рдЧреЗрдЬрдореЗрдВрдЯ: рддреЗрдЬрд╝ рдмрджрд▓рддреЗ рдЯреНрд░реЗрдВрдбреНрд╕ рдХреЗ рд╕рд╛рде рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдмрдиреЗ рд░рд╣рдирд╛",
        "ЁЯФБ рдЧреНрд░реЛрде рдФрд░ рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ: рдПрд▓реНрдЧреЛрд░рд┐рджрдо рдмрджрд▓рд╛рд╡ рд╕реЗ рд░реАрдЪ рдХрдо рд╣реЛ рдЬрд╛рдирд╛",
        "ЁЯзНтАНтЩАя╕П рдЧреНрд░реЛрде рдФрд░ рдПрдВрдЧреЗрдЬрдореЗрдВрдЯ: рдмрдбрд╝реЗ рдХреНрд░рд┐рдПрдЯрд░реНрд╕ рд╕реЗ рдкреНрд░рддрд┐рд╕реНрдкрд░реНрдзрд╛ рдХрд░рдирд╛",
        "ЁЯЧгя╕П рдмреНрд░рд╛рдВрдб рдФрд░ рдкрд╣рдЪрд╛рди: рдЕрдкрдиреА рдпреВрдирд┐рдХ рдЖрд╡рд╛рдЬрд╝/рд╕реНрдЯрд╛рдЗрд▓ рддрдп рдХрд░рдиреЗ рдореЗрдВ рдореБрд╢реНрдХрд┐рд▓",
        "ЁЯдЭ рдмреНрд░рд╛рдВрдб рдФрд░ рдкрд╣рдЪрд╛рди: рдкреНрд░рд╛рдорд╛рдгрд┐рдХрддрд╛ рдФрд░ рдмреНрд░рд╛рдВрдб рдЕрдкреАрд▓ рдХреЗ рдмреАрдЪ рд╕рдВрддреБрд▓рди рдмрдирд╛рдирд╛",
        "ЁЯМ▒ рдмреНрд░рд╛рдВрдб рдФрд░ рдкрд╣рдЪрд╛рди: рд╕рдЪреНрдЪреА, рдЬреБрдбрд╝реА рд╣реБрдИ рдХрдореНрдпреБрдирд┐рдЯреА рдмрдирд╛рдирд╛",
        "ЁЯТФ рдореЛрдиреЗрдЯрд╛рдЗрдЬрд╝реЗрд╢рди рдФрд░ рд╕реНрдХреЗрд▓рд┐рдВрдЧ: рдлреЙрд▓реЛрдЕрд░реНрд╕ рдХреЛ рдкреЗрдб рдХрд╕реНрдЯрдорд░ рдореЗрдВ рдирд╣реАрдВ рдмрджрд▓ рдкрд╛рдирд╛",
        "ЁЯдЭ рдореЛрдиреЗрдЯрд╛рдЗрдЬрд╝реЗрд╢рди рдФрд░ рд╕реНрдХреЗрд▓рд┐рдВрдЧ: рдмреНрд░рд╛рдВрдб рдХреЛрд▓реИрдмреЛрд░реЗрд╢рдиреНрд╕ рди рдорд┐рд▓рдирд╛",
        "ЁЯУК рдореЛрдиреЗрдЯрд╛рдЗрдЬрд╝реЗрд╢рди рдФрд░ рд╕реНрдХреЗрд▓рд┐рдВрдЧ: рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕ рдФрд░ рдореЗрдЯреНрд░рд┐рдХреНрд╕ рд╕рдордЭрдиреЗ рдореЗрдВ рдЙрд▓рдЭрди",
        "ЁЯе╡ рдХреНрд░рд┐рдПрдЯрд░ рд╡реЗрд▓рдиреЗрд╕: рдмрд░реНрдирдЖрдЙрдЯ рдФрд░ рдХрдВрдЯреЗрдВрдЯ рдердХрд╛рди",
        "ЁЯТм рдХреНрд░рд┐рдПрдЯрд░ рд╡реЗрд▓рдиреЗрд╕: рдЯреНрд░реЛрд▓реНрд╕/рдиреЗрдЧреЗрдЯрд┐рд╡рд┐рдЯреА рд╕реЗ рдирд┐рдкрдЯрдирд╛",
        "ЁЯУ▒ рдХреНрд░рд┐рдПрдЯрд░ рд╡реЗрд▓рдиреЗрд╕: рдПрдХ рд╕рд╛рде рдХрдИ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд╕рдВрднрд╛рд▓рдирд╛",
      ],
      goals: [
        "10K / 50K / 100K+ рдлреЙрд▓реЛрдЕрд░реНрд╕ рддрдХ рдкрд╣реБрдБрдЪрдирд╛",
        "тВ╣25K / тВ╣50K / тВ╣1L+ рдорд╛рд╕рд┐рдХ рдХрдорд╛рдИ рдХрд░рдирд╛",
        "рдмреНрд░рд╛рдВрдб рд╕рд╣рдпреЛрдЧ рдкреНрд░рд╛рдкреНрдд рдХрд░рдирд╛",
        "рдЕрдкрдирд╛ рдкрд░реНрд╕рдирд▓ рдмреНрд░рд╛рдВрдб рдмрдирд╛рдирд╛",
        "рд╡рд╛рдпрд░рд▓ рдХрдВрдЯреЗрдВрдЯ рдмрдирд╛рдирд╛",
        "рдЬрд╝реНрдпрд╛рджрд╛ рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдкреЛрд╕реНрдЯ рдХрд░рдирд╛",
        "рдирдП рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рддрдХ рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░рдирд╛",
      ],
    },
    buttons: {
      next: "рдЕрдЧрд▓рд╛ рдХрджрдо",
      back: "рдкрд┐рдЫрд▓рд╛",
      submit: "рдореЗрд░рд╛ рдХреНрд░рд┐рдПрдЯрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд╛рдПрдВ",
    },
    freeResources: {
      title: "ЁЯОЙ рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛! рдпрд╣рд╛рдБ рд╣реИрдВ рдЖрдкрдХреЗ рдореБрдлреНрдд рдХреНрд░рд┐рдПрдЯрд░ рд╕рдВрд╕рд╛рдзрди",
      subtitle:
        "рдЕрдкрдиреА рдХреНрд░рд┐рдПрдЯрд░ рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрди рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдЯреВрд▓реНрд╕ рдХреЛ рдбрд╛рдЙрдирд▓реЛя┐╜я┐╜ рдХрд░реЗрдВ",
      mediaKit: {
        title: "рдкреНрд░реЛрдлреЗрд╢рдирд▓ рдореАрдбрд┐рдпрд╛ рдХрд┐рдЯ рдЯреЗрдореНрдкреНрд▓реЗрдЯ",
        description: "рдЖрдХя┐╜я┐╜я┐╜реНрд╖рдХ рдореАрдбрд┐рдпрд╛ рдХрд┐рдЯ рдмрдирд╛рдПрдВ рдЬреЛ рдмреНрд░рд╛рдВрдбреНрд╕ рдХреЛ рдкрд╕рдВрдж рдЖрдПрдВрдЧреЗ",
      },
      emailTemplates: {
        title: "рдмреНрд░рд╛рдВрдб рдЖрдЙрдЯрд░реАрдЪ рдИрдореЗрд▓ рдЯреЗрдореНрдкреНрд▓реЗрдЯреНрд╕",
        description: "рдмреНрд░рд╛рдВрдб рдкрд╛рд░реНрдЯрдирд░рд╢рд┐рдк рдХреЗ рд▓рд┐рдП 30+ рд╕рд┐рджреНрдз рдИрдореЗрд▓ рдЯреЗя┐╜я┐╜реНрдкреНрд▓реЗрдЯреНрд╕",
      },
      growthGuide: {
        title: "90-рджрд┐рди рдХреА рдЧреНрд░реЛрде рд╕реНрдЯреНрд░реИрдЯреЗрдЬреА рдЧрд╛рдЗрдб",
        description: "рдЕрдкрдиреА рдлреЙрд▓реЛрдЗрдВрдЧ рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрдЯреЗрдк-рдмрд╛рдИ-рд╕реНрдЯреЗя┐╜я┐╜ я┐╜я┐╜я┐╜реЛрдбрдореИрдк",
      },
      downloadFree: "рдореБрдлреНрдд рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
    },
  },
};

export default function Quiz() {
  const [currentStep, setCurrentStep] = useState(1);
  const [quizData, setQuizData] = useState<QuizData>(initialQuizData);
  const [language, setLanguage] = useState<"english" | "hindi">("english");
  const [isGenerating, setIsGenerating] = useState(false);
  const [showFreeResources, setShowFreeResources] = useState(false);
  const navigate = useNavigate();
  const quizContentRef = useRef<HTMLDivElement>(null);
  const [platforms, setPlatforms] = useState<string[]>(
    languages[language].options.platforms,
  );

  const t = sanitizeDeep(languages[language]);
  const totalSteps = 13;

  // Save language preference and update quiz data when language changes
  useEffect(() => {
    localStorage.setItem("famechase-language", language);
    setQuizData((prev) => ({ ...prev, language: language }));
    setPlatforms(languages[language].options.platforms);
  }, [language]);

  // Try loading platform options from API with graceful fallback
  useEffect(() => {
    let aborted = false;
    (async () => {
      const sources = ["/api/platforms", "/platforms.json"];
      for (const url of sources) {
        try {
          const res = await fetch(url, {
            headers: { Accept: "application/json" },
          });
          if (!res.ok) continue;
          const contentType = res.headers.get("content-type") || "";
          let data: any = null;
          if (contentType.includes("application/json")) {
            data = await res.json();
          } else {
            const text = await res.text();
            try {
              data = JSON.parse(text);
            } catch {
              continue;
            }
          }
          const list = Array.isArray(data)
            ? data
            : Array.isArray((data as any).platforms)
              ? (data as any).platforms
              : null;
          if (!aborted && list && list.length) {
            setPlatforms(list.map(String));
            return;
          }
        } catch {
          // ignore and fall back
        }
      }
    })();
    return () => {
      aborted = true;
    };
  }, [language]);

  // Scroll behaviors
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, []);
  useEffect(() => {
    if (showFreeResources) {
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, [showFreeResources]);

  const updateQuizData = (field: keyof QuizData, value: any) => {
    setQuizData((prev) => ({ ...prev, [field]: value }));
  };

  // Challenge category selections (Step 9)
  const [challengeSelections, setChallengeSelections] = useState<
    Record<string, string>
  >({});

  const challengeGroups = (() => {
    const groups: Record<string, string[]> = {
      "Growth & Engagement": [],
      "Brand & Identity": [],
      "Monetization & Scaling": [],
      "Creator Wellness": [],
    };
    const list = languages[language].options.challenges as string[];
    list.forEach((c) => {
      const parts = c.split(": ");
      if (parts.length >= 2) {
        const head = parts[0].replace(/^.*?\s/, "").trim(); // remove emoji
        const item = parts.slice(1).join(": ");
        if (groups[head]) groups[head].push(item);
      }
    });
    return groups;
  })();

  useEffect(() => {
    // Initialize selections from existing data if present
    if (quizData.biggestChallenge && quizData.biggestChallenge.length) {
      const next: Record<string, string> = {};
      quizData.biggestChallenge.forEach((full) => {
        const parts = full.split(": ");
        if (parts.length >= 2) {
          const head = parts[0].replace(/^.*?\s/, "").trim();
          const item = parts.slice(1).join(": ");
          if (challengeGroups[head]) next[head] = item;
        }
      });
      setChallengeSelections(next);
    }
  }, [language]);

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return quizData.primaryPlatform;
      case 2:
        return quizData.followerCount;
      case 3:
        return quizData.secondaryPlatforms.length > 0;
      case 4:
        return quizData.niche;
      case 5:
        return quizData.contentType;
      case 6:
        return quizData.postingFrequency;
      case 7:
        return quizData.experience.length > 0;
      case 8:
        return quizData.monthlyIncome;
      case 9:
        return true;
      case 10:
        return quizData.goals.length > 0;
      case 11:
        return true;
      case 12:
        return quizData.engagementRate;
      case 13:
        return quizData.name && quizData.email && quizData.city;
      default:
        return false;
    }
  };

  const handleNext = () => {
    if (currentStep < totalSteps && canProceed()) {
      setCurrentStep(currentStep + 1);
      setTimeout(() => {
        if (quizContentRef.current) {
          quizContentRef.current.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }, 100);
    } else if (currentStep === totalSteps) {
      setShowFreeResources(true);
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }, 100);
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
      setTimeout(() => {
        if (quizContentRef.current) {
          quizContentRef.current.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }, 100);
    }
  };

  const handleSubmit = async () => {
    setIsGenerating(true);
    try {
      const finalQuizData = { ...quizData, language };
      localStorage.setItem("fameChaseQuizData", JSON.stringify(finalQuizData));

      if (isSupabaseConfigured() && supabase) {
        const userData = {
          name: quizData.name,
          email: quizData.email,
          phone: quizData.phone || null,
          city: quizData.city,
          niche: quizData.niche,
          primary_platform: quizData.primaryPlatform,
          follower_count: quizData.followerCount,
          goals: quizData.goals,
          quiz_data: finalQuizData,
        };

        const logError = (label: string, err: any) => {
          const detailed = JSON.stringify(err, Object.getOwnPropertyNames(err));
          console.error(label, detailed);
        };

        try {
          const { error: upsertError } = await supabase
            .from("users")
            .upsert([userData], { onConflict: "email" })
            .select();

          if (upsertError) {
            logError("Supabase upsert error", upsertError);
            const { error: updateError } = await supabase
              .from("users")
              .update(userData)
              .eq("email", userData.email)
              .select();
            if (updateError) {
              logError("Supabase update fallback error", updateError);
              const { error: insertError } = await supabase
                .from("users")
                .insert([userData])
                .select();
              if (insertError)
                logError("Supabase insert fallback error", insertError);
            }
          }
        } catch (e) {
          logError("Unexpected Supabase error", e);
        }
      }

      await new Promise((resolve) => setTimeout(resolve, 1500));
      navigate("/results");
      window.scrollTo({ top: 0, behavior: "auto" });
      setTimeout(() => window.scrollTo({ top: 0, behavior: "smooth" }), 50);
    } catch (error) {
      console.error("Error in handleSubmit:", error);
      navigate("/results");
      window.scrollTo({ top: 0, behavior: "auto" });
    } finally {
      setIsGenerating(false);
    }
  };

  const toggleSecondaryPlatform = (platform: string) => {
    const selected = quizData.secondaryPlatforms.includes(platform)
      ? quizData.secondaryPlatforms.filter((p) => p !== platform)
      : [...quizData.secondaryPlatforms, platform];
    updateQuizData("secondaryPlatforms", selected);
  };

  const generateDownload = async (type: string, fileName: string) => {
    let content = "";
    const userName = quizData.name || "Creator";
    const fontSizeIndicator = `\n=== DISPLAY INSTRUCTIONS ===\nIMPORTANT: Set Font Size to 18-22pt for comfortable reading\nPlease zoom to 150-200% or increase font size in your viewer\nThis content is optimized for larger text display for better readability\n========================================================\n\n`;

    if (type === "mediaKit") {
      content =
        fontSizeIndicator +
        `${language === "hindi" ? "рдореАрдбрд┐рдпрд╛ рдХрд┐рдЯ" : "MEDIA KIT"} - ${userName}\n\n${language === "hindi" ? "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА:" : "PERSONAL INFO:"}\n${language === "hindi" ? "рдирд╛рдо:" : "Name:"} ${userName}\n${language === "hindi" ? "рдирд┐рдЪ:" : "Niche:"} ${quizData.niche}\n${language === "hindi" ? "рдкреНрд▓реЗрдЯрдлреЙя┐╜я┐╜я┐╜реНрдо:" : "Platform:"} ${quizData.primaryPlatform}\n${language === "hindi" ? "рдлреЙрд▓реЛрдЕрд░реНрд╕:" : "Followers:"} ${quizData.followerCount}`;
    } else if (type === "emailTemplates") {
      content = fontSizeIndicator + `Email Templates - ${userName}`;
    } else if (type === "growthStrategy") {
      content = fontSizeIndicator + `Growth Strategy - ${userName}`;
    }

    await downloadFile(content, fileName);
  };

  if (showFreeResources) {
    return (
      <div className="min-h-screen bg-white">
        <header className="relative z-10 px-4 py-6 bg-white border-b border-gray-100 sticky top-0 backdrop-blur-sm">
          <div className="container mx-auto flex justify-between items-center">
            <Link to="/" className="text-lg font-bold text-gray-900">
              FameChase<span className="text-neon-green">.com</span>
            </Link>
            <div className="flex items-center gap-4">
              <Link
                to="/"
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <Home className="w-4 h-4" />
                Back to Home
              </Link>
              <select
                value={language}
                onChange={(e) =>
                  setLanguage(e.target.value as "english" | "hindi")
                }
                className="bg-white border border-gray-300 text-gray-900 px-3 py-2 rounded-lg text-sm font-medium"
              >
                <option value="english">English</option>
                <option value="hindi">рд╣рд┐рдВрджреА</option>
              </select>
            </div>
          </div>
        </header>

        <main className="container mx-auto px-4 py-12">
          <div className="max-w-4xl mx-auto text-center">
            <div className="w-20 h-20 bg-gradient-to-r from-neon-green to-electric-blue rounded-full flex items-center justify-center mx-auto mb-6">
              <CheckCircle className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              {t.freeResources.title}
            </h1>
            <p className="text-xl text-gray-600 mb-12 max-w-2xl mx-auto">
              {t.freeResources.subtitle}
            </p>

            <div className="grid md:grid-cols-3 gap-8 mb-12">
              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <FileText className="w-8 h-8 text-blue-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Media Kit Template
                </h3>
                <p className="text-gray-600 mb-4">
                  Simple media kit template with basic stats and contact info -
                  perfect for getting started
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ Professional template format
                  <br />тЬУ Industry-standard rate suggestions
                  <br />тЬУ Easy customization fields
                  <br />тЬУ Multi-platform rate structure
                </div>
                <button
                  onClick={() =>
                    void generateDownload(
                      "mediaKit",
                      `${quizData.name || "Creator"}_Basic_Media_Kit_${language}.pdf`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>

              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Mail className="w-8 h-8 text-green-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Email Templates (6)
                </h3>
                <p className="text-gray-600 mb-4">
                  Essential outreach templates to get you started with brand
                  partnerships
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ 6 proven email templates
                  <br />тЬУ Professional follow-up sequences
                  <br />тЬУ Ready-to-use pitch formats
                  <br />тЬУ Brand outreach best practices
                </div>
                <button
                  onClick={() =>
                    void generateDownload(
                      "emailTemplates",
                      `Basic_Email_Templates_${language}.pdf`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>

              <div className="bg-white border-2 border-gray-200 rounded-2xl p-8 hover:border-neon-green transition-colors relative">
                <div className="absolute top-4 right-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-bold">
                  FREE STARTER
                </div>
                <div className="w-16 h-16 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                  <Target className="w-8 h-8 text-purple-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">
                  Basic Growth Guide (30-Day)
                </h3>
                <p className="text-gray-600 mb-4">
                  Simple 30-day action plan to get you started on your growth
                  journey
                </p>
                <div className="text-sm text-green-600 mb-4">
                  тЬУ Comprehensive 30-day action plan
                  <br />тЬУ Proven growth strategies
                  <br />тЬУ Daily actionable tasks
                  <br />тЬУ Progress tracking templates
                </div>
                <button
                  onClick={() =>
                    void generateDownload(
                      "growthStrategy",
                      `Basic_Growth_Guide_${language}.pdf`,
                    )
                  }
                  className="w-full bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-3 px-6 rounded-xl hover:shadow-lg transition-all"
                >
                  <Download className="w-4 h-4 inline mr-2" />
                  {t.freeResources.downloadFree}
                </button>
              </div>
            </div>

            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border-2 border-yellow-200 rounded-2xl p-8">
              <h2 className="text-lg font-bold text-gray-900 mb-4">
                {language === "hindi"
                  ? "рдЕрдкрдирд╛ рдкреВрд░рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
                  : "Want Your Complete Analysis?"}
              </h2>
              <p className="text-gray-600 mb-6">
                {language === "hindi"
                  ? "рд╡реНрдпя┐╜я┐╜реНрддрд┐рдЧрдд SWOT рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рдЧреНрд░реЛрде рд░рдгрдиреАрддрд┐, рдФрд░ рдкреНрд░реАрдорд┐рдпрдо рдЯреВрд▓реНрд╕ рдХреЗ рд╕рд╛рде рдЕрдкрдиреА рдХреНрд░рд┐рдПрдЯрд░ рдпрд╛рддреНрд░рд╛ рдХреЛ рддреЗрдЬрд╝реА рд╕реЗ рдЖрдЧреЗ рдмрдврд╝рд╛рдПрдВред"
                  : "Get personalized SWOT analysis, growth strategy, and premium tools to accelerate your creator journey."}
              </p>
              <button
                onClick={handleSubmit}
                className="bg-gradient-to-r from-neon-green to-electric-blue text-black font-bold py-4 px-8 rounded-xl text-lg hover:shadow-lg hover:scale-105 transition-all duration-300"
              >
                <Sparkles className="w-5 h-5 inline mr-2" />
                {t.buttons.submit}
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <header className="relative z-10 px-2 md:px-4 py-3 md:py-4 bg-white border-b border-gray-100 sticky top-0 backdrop-blur-sm">
        <div className="container mx-auto flex justify-between items-center">
          <Link to="/" className="text-base md:text-lg font-bold text-gray-900">
            FameChase<span className="text-neon-green">.com</span>
          </Link>
          <div className="flex items-center gap-2 md:gap-4">
            <Link
              to="/"
              className="flex items-center gap-1 md:gap-2 text-gray-600 hover:text-gray-900 transition-colors text-sm md:text-base"
            >
              <Home className="w-3 h-3 md:w-4 md:h-4" />
              <span className="hidden sm:inline">Back to Home</span>
              <span className="sm:hidden">Home</span>
            </Link>
            <select
              value={language}
              onChange={(e) =>
                setLanguage(e.target.value as "english" | "hindi")
              }
              className="bg-white border border-gray-300 text-gray-900 px-2 py-1 md:px-3 md:py-2 rounded-lg text-xs md:text-sm font-medium"
            >
              <option value="english">English</option>
              <option value="hindi">рд╣рд┐рдВрджреА</option>
            </select>
          </div>
        </div>
      </header>

      <main
        ref={quizContentRef}
        className="container mx-auto px-2 md:px-4 pt-1 pb-36"
      >
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-2 md:mb-3">
            <h1 className="text-2xl md:text-4xl font-bold text-gray-900 mb-2 md:mb-4">
              {t.title}
            </h1>
            <p className="text-sm md:text-lg text-gray-600 leading-relaxed px-2">
              {t.subtitle}
            </p>
            <div className="flex justify-center gap-3 mt-3">
              <Sparkles className="w-4 h-4 md:w-6 md:h-6 text-neon-green animate-pulse" />
              <Star className="w-4 h-4 md:w-6 md:h-6 text-electric-blue animate-pulse" />
              <Target className="w-4 h-4 md:w-6 md:h-6 text-soft-violet animate-pulse" />
            </div>
          </div>

          <div className="bg-white border-2 border-gray-100 rounded-2xl px-4 md:px-8 pt-3 md:pt-6 pb-20 md:pb-28 shadow-xl backdrop-blur-sm min-h-[70vh] flex flex-col gap-3">
            <div className="text-xs md:text-sm text-gray-500 mb-2">
              Step {currentStep} of {totalSteps}
            </div>
            {isGenerating && (
              <div className="text-center py-12">
                <div className="w-20 h-20 bg-gradient-to-r from-neon-green to-electric-blue rounded-full flex items-center justify-center mx-auto mb-6 animate-spin">
                  <Sparkles className="w-10 h-10 text-white" />
                </div>
                <h2 className="text-lg font-bold text-gray-900 mb-4">
                  Generating Your Creator Analysis...
                </h2>
                <p className="text-gray-600">
                  Our AI is analyzing your responses and creating your
                  personalized toolkit
                </p>
              </div>
            )}

            {!isGenerating && (
              <>
                {currentStep === 1 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <div className="w-12 h-12 md:w-16 md:h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Globe className="w-6 h-6 md:w-8 md:h-8 text-white" />
                      </div>
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        Your Main Platform
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        Where do you create and share your content?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.primaryPlatform}
                      </label>
                      <select
                        value={quizData.primaryPlatform}
                        onChange={(e) =>
                          updateQuizData("primaryPlatform", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-electric-blue focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your primary platform</option>
                        {platforms.map((platform) => (
                          <option key={platform} value={platform}>
                            {platform}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {currentStep === 2 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <div className="w-12 h-12 md:w-16 md:h-16 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Star className="w-6 h-6 md:w-8 md:h-8 text-white" />
                      </div>
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        Your Audience Size
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        How many followers do you currently have?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.followerCount}
                      </label>
                      <select
                        value={quizData.followerCount}
                        onChange={(e) =>
                          updateQuizData("followerCount", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-electric-blue focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your follower count</option>
                        {t.options.followerRanges.map((range) => (
                          <option key={range} value={range}>
                            {range}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {currentStep === 3 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <div className="w-12 h-12 md:w-16 md:h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Layout className="w-6 h-6 md:w-8 md:h-8 text-white" />
                      </div>
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        Other Platforms
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        Which other platforms do you use?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.secondaryPlatforms}
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {(platforms.length
                          ? platforms
                          : languages[language].options.platforms
                        ).map((platform) => (
                          <button
                            key={platform}
                            onClick={() => toggleSecondaryPlatform(platform)}
                            className={`p-2 md:p-3 rounded-lg border-2 text-xs md:text-sm font-medium transition-all duration-300 ${
                              quizData.secondaryPlatforms.includes(platform)
                                ? "bg-gradient-to-r from-neon-green/10 to-electric-blue/10 border-neon-green text-gray-900 shadow-lg"
                                : "bg-white border-gray-200 text-gray-700 hover:border-gray-300 hover:shadow-md"
                            }`}
                          >
                            {platform}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 4: Content Niche */}
                {currentStep === 4 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-xl font-bold text-gray-900 mb-2">
                        Your Content Niche ЁЯОп
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        What topics do you create content about?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.niche}
                      </label>
                      <select
                        value={quizData.niche}
                        onChange={(e) =>
                          updateQuizData("niche", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-soft-violet focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your niche</option>
                        {t.options.niches.map((niche: string) => (
                          <option key={niche} value={niche}>
                            {niche}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 5: Content Type */}
                {currentStep === 5 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-xl font-bold text-gray-900 mb-2">
                        Content Format ЁЯОе
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        What type of content do you primarily create?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.contentType}
                      </label>
                      <select
                        value={quizData.contentType}
                        onChange={(e) =>
                          updateQuizData("contentType", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-electric-blue focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your content type</option>
                        {t.options.contentTypes.map((type: string) => (
                          <option key={type} value={type}>
                            {type}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 6: Posting Frequency */}
                {currentStep === 6 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-xl font-bold text-gray-900 mb-2">
                        Posting Schedule тП░
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        How often do you share new content?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.postingFrequency}
                      </label>
                      <select
                        value={quizData.postingFrequency}
                        onChange={(e) =>
                          updateQuizData("postingFrequency", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-electric-blue focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your posting frequency</option>
                        {t.options.frequencies.map((freq: string) => (
                          <option key={freq} value={freq}>
                            {freq}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 7: Experience */}
                {currentStep === 7 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-xl font-bold text-gray-900 mb-2">
                        Your Creator Journey ЁЯЪА
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        How long have you been creating content?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.experience}
                      </label>
                      <select
                        value={quizData.experience[0] || ""}
                        onChange={(e) =>
                          updateQuizData(
                            "experience",
                            e.target.value ? [e.target.value] : [],
                          )
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-soft-violet focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your experience level</option>
                        {t.options.experiences.map((exp: string) => (
                          <option key={exp} value={exp}>
                            {exp}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 8: Monthly Income */}
                {currentStep === 8 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-xl font-bold text-gray-900 mb-2">
                        Current Income ЁЯТ░
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        What's your current monthly income from content
                        creation?
                      </p>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.monthlyIncome}
                      </label>
                      <select
                        value={quizData.monthlyIncome}
                        onChange={(e) =>
                          updateQuizData("monthlyIncome", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-soft-violet focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your monthly income</option>
                        {t.options.incomes.map((income: string) => (
                          <option key={income} value={income}>
                            {income}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 9: Biggest Challenge (1 per head) */}
                {currentStep === 9 && (
                  <div className="space-y-6">
                    <div className="text-center mb-2 md:mb-4">
                      <div className="w-12 h-12 md:w-16 md:h-16 bg-gradient-to-r from-red-500 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-3">
                        <Target className="w-6 h-6 md:w-8 md:h-8 text-white" />
                      </div>
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        {t.questions.biggestChallenge}
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        {language === "hindi"
                          ? "рд╣рд░ рд╢реНрд░реЗрдгреА рд╕реЗ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВред"
                          : "You can choose one from each category."}
                      </p>
                    </div>

                    <div className="space-y-4">
                      {Object.keys(challengeGroups).map((head) => (
                        <div key={head} className="grid gap-2">
                          <label className="block text-gray-900 font-semibold text-base">
                            {head}
                          </label>
                          <select
                            value={challengeSelections[head] || ""}
                            onChange={(e) => {
                              const val = e.target.value;
                              const next = {
                                ...challengeSelections,
                                [head]: val,
                              };
                              setChallengeSelections(next);
                              const combined: string[] = Object.entries(next)
                                .filter(([, v]) => v)
                                .map(([h, v]) => {
                                  const emoji = h.includes("Growth")
                                    ? "ЁЯФД"
                                    : h.includes("Brand")
                                      ? "ЁЯза"
                                      : h.includes("Monetization")
                                        ? "ЁЯТФ"
                                        : "ЁЯе╡";
                                  return `${emoji} ${h}: ${v}`;
                                });
                              updateQuizData("biggestChallenge", combined);
                            }}
                            className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 rounded-lg focus:border-orange-500 focus:outline-none"
                          >
                            <option value="">
                              {language === "hindi" ? "рдПрдХ рдЪреБрдиреЗрдВ" : "Select one"}
                            </option>
                            {challengeGroups[head].map((opt) => (
                              <option key={opt} value={opt}>
                                {opt}
                              </option>
                            ))}
                          </select>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Step 10: Goals (max 3, scrollable) */}
                {currentStep === 10 && (
                  <div className="space-y-6">
                    <div className="text-center mb-2 md:mb-4">
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        {t.questions.goals}
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        {language === "hindi"
                          ? "рдЕрдЧрд▓реЗ 6 рдорд╣реАрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХрддрдо 3 рд▓рдХреНрд╖реНрдп рдЪреБрдиреЗрдВред"
                          : "Select up to 3 goals for the next 6 months."}
                      </p>
                    </div>
                    <div className="grid grid-cols-1 gap-2 max-h-72 overflow-y-auto pr-1 text-black">
                      {t.options.goals.map((goal: string) => {
                        const selected = quizData.goals.includes(goal);
                        return (
                          <label
                            key={goal}
                            className={`flex items-center gap-3 p-3 rounded-lg border-2 text-sm md:text-base transition ${selected ? "border-neon-green bg-neon-green/10" : "border-gray-200 hover:border-gray-300"} text-black`}
                          >
                            <input
                              type="checkbox"
                              checked={selected}
                              onChange={() => {
                                const list = quizData.goals;
                                if (selected) {
                                  updateQuizData(
                                    "goals",
                                    list.filter((g: string) => g !== goal),
                                  );
                                } else if (list.length < 3) {
                                  updateQuizData("goals", [...list, goal]);
                                }
                              }}
                              className="h-4 w-4"
                            />
                            <span>{goal}</span>
                          </label>
                        );
                      })}
                    </div>
                  </div>
                )}

                {/* Step 11: Social Links (optional) */}
                {currentStep === 11 && (
                  <div className="space-y-4 pb-6">
                    <div className="text-center mb-2 md:mb-4">
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        {t.questions.socialLinks}
                      </h2>
                      <p className="text-sm md:text-base text-gray-600 px-2">
                        {language === "hindi"
                          ? "рдЕя┐╜я┐╜рдиреЗ рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВред"
                          : "Share your profile links."}
                      </p>
                    </div>
                    <div className="grid grid-cols-1 gap-3 max-h-72 overflow-y-auto pr-1 text-black">
                      {(
                        [
                          "instagram",
                          "youtube",
                          "linkedin",
                          "website",
                          "twitter",
                          "tiktok",
                        ] as const
                      ).map((key) => (
                        <div key={key}>
                          <label className="block text-gray-900 font-medium text-sm mb-1 capitalize">
                            {key}
                          </label>
                          <input
                            type="text"
                            value={(quizData.socialLinks as any)[key]}
                            onChange={(e) =>
                              updateQuizData("socialLinks", {
                                ...quizData.socialLinks,
                                [key]: e.target.value,
                              })
                            }
                            className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-2 rounded-lg focus:border-electric-blue focus:outline-none text-sm"
                            placeholder={
                              language === "hindi"
                                ? `${key} URL рджрд░реНрдЬ рдХрд░реЗрдВ`
                                : `Enter your ${key} URL`
                            }
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Step 12: Engagement Rate */}
                {currentStep === 12 && (
                  <div className="space-y-4 md:space-y-6 flex-1 flex flex-col">
                    <div className="text-center mb-2 md:mb-3">
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        Engagement Rate ЁЯТп
                      </h2>
                    </div>
                    <div className="flex-1">
                      <label className="block text-gray-900 font-semibold mb-3 text-base md:text-lg">
                        {t.questions.engagementRate}
                      </label>
                      <select
                        value={quizData.engagementRate}
                        onChange={(e) =>
                          updateQuizData("engagementRate", e.target.value)
                        }
                        className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-3 md:py-4 rounded-lg focus:border-electric-blue focus:outline-none transition-colors text-sm md:text-base"
                      >
                        <option value="">Select your engagement rate</option>
                        {t.options.engagementRates.map((er: string) => (
                          <option key={er} value={er}>
                            {er}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                )}

                {/* Step 13: Contact Info */}
                {currentStep === 13 && (
                  <div className="space-y-4 pb-8">
                    <div className="text-center mb-2 md:mb-4">
                      <h2 className="text-lg md:text-2xl font-bold text-gray-900 mb-2">
                        Contact Information ЁЯУЗ
                      </h2>
                    </div>
                    <div className="grid grid-cols-1 gap-3">
                      <div>
                        <label className="block text-gray-900 font-medium text-sm mb-1">
                          {t.questions.name}
                        </label>
                        <input
                          type="text"
                          value={quizData.name}
                          onChange={(e) =>
                            updateQuizData("name", e.target.value)
                          }
                          className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-2 rounded-lg focus:border-electric-blue focus:outline-none text-sm"
                          placeholder="Your name"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-900 font-medium text-sm mb-1">
                          {t.questions.email}
                        </label>
                        <input
                          type="email"
                          value={quizData.email}
                          onChange={(e) =>
                            updateQuizData("email", e.target.value)
                          }
                          className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-2 rounded-lg focus:border-electric-blue focus:outline-none text-sm"
                          placeholder="your@email.com"
                        />
                      </div>
                      <div>
                        <label className="block text-gray-900 font-medium text-sm mb-1">
                          {t.questions.city}
                        </label>
                        <input
                          type="text"
                          value={quizData.city}
                          onChange={(e) =>
                            updateQuizData("city", e.target.value)
                          }
                          className="w-full bg-white border-2 border-gray-300 text-gray-900 px-3 py-2 rounded-lg focus:border-electric-blue focus:outline-none text-sm"
                          placeholder="City"
                        />
                      </div>
                    </div>
                  </div>
                )}

                <div className="fixed left-0 right-0 bottom-0 z-40 bg-white/95 backdrop-blur border-t border-gray-200">
                  <div className="container mx-auto max-w-xl px-3 md:px-4 py-3 md:py-4 flex items-center justify-between gap-3">
                    <button
                      onClick={handleBack}
                      className="px-4 py-2 rounded-lg border text-sm md:text-base disabled:opacity-50 text-black"
                      disabled={currentStep === 1}
                    >
                      Previous
                    </button>
                    <button
                      onClick={
                        currentStep === totalSteps ? handleSubmit : handleNext
                      }
                      disabled={!canProceed()}
                      className="px-5 py-2.5 rounded-lg bg-neon-green text-black font-semibold text-sm md:text-base disabled:opacity-60 disabled:cursor-not-allowed"
                    >
                      {currentStep === totalSteps
                        ? t.buttons.submit
                        : t.buttons.next}
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
